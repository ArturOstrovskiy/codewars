// ‚ùî‚ùî‚ùîDESCRIPTION‚ùî‚ùî‚ùî
//C–æ–∑–¥–∞–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏.

// üìùüìùüìùTESTüìùüìùüìù
/*assert.deepEqual(filter_list([1,2,'a','b']),[1,2], 'For input [1,2,"a","b"]');
assert.deepEqual(filter_list([1,'a','b',0,15]),[1,0,15], 'For input [1,"a","b",0,15]');
assert.deepEqual(filter_list([1,2,'aasf','1','123',123]),[1,2,123], 'For input [1,2,"aasf","1","123",123]');*/

// ‚úÖ‚úÖ‚úÖSOLUTION‚úÖ‚úÖ‚úÖ
  const filter_list = l => l.filter(i => typeof i === 'number');
// filter_list = l –≤—Å–µ —Ä–∞–≤–Ω–æ —á—Ç–æ function filter_list(l){}

/* i => ...: –≠—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
–û–Ω –æ–±—ä—è–≤–ª—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º a*/

/*
typeof i === 'number' —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ i —Å 'number'(—á–∏—Å–ª–æ)
–µ—Å–ª–∏ true, —Ç–æ filter –¥–æ–±–∞–≤–ª—è–µ—Ç i –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
*/
console.log(filter_list([1,2,'a','b']))




