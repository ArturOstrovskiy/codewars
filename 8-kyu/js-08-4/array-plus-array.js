// ‚ùî‚ùî‚ùîDESCRIPTION‚ùî‚ùî‚ùî
/*–ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤
–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—É–º–º—É –≤—Å–µ—Ö –∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –Ø –±—É–¥—É –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å.
P.S. –ö–∞–∂–¥—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∂–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º.*/

// üìùüìùüìùTESTüìùüìùüìù
/*assert.strictEqual(arrayPlusArray([1, 2, 3], [4, 5, 6]), 21);
assert.strictEqual(arrayPlusArray([-1, -2, -3], [-4, -5, -6]), -21);
assert.strictEqual(arrayPlusArray([0, 0, 0], [4, 5, 6]), 15);
assert.strictEqual(arrayPlusArray([100, 200, 300], [400, 500, 600]), 2100);*/

// ‚úÖ‚úÖ‚úÖSOLUTION‚úÖ‚úÖ‚úÖ

/*function arrayPlusArray(arr1, arr2) {
	return 	arr1.reduce((a, b) => a + b) + arr2.reduce((a, b) => a + b) ;
}*/

// accepts indefinite number of arrays
function arrayPlusArray(...arrays) {
	return [].concat(...arrays).reduce((a,b) => a+b,0)
	//[].concat(...arrays)—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
	// [1, 2, 3], [4, 5, 6] —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ–¥–Ω–∏–º –º–∞—Å—Å–∏–≤–æ–º [1, 2, 3, 4, 5, 6]
	// .reduce((a,b) => a+b) –≤—ã–ø–æ–ª–Ω—è–µ—Ç a+b,–∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Å—É–º–º—É a –∏ –≤ –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é a
}

console.log(arrayPlusArray([1, 2, 3], [4, 5, 6]))